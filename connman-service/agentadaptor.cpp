/*
 * This file was generated by qdbusxml2cpp version 0.8 and subsequently hand edited
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 */

#include "agentadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class AgentAdaptor
 */

AgentAdaptor::AgentAdaptor(Agent *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

AgentAdaptor::~AgentAdaptor()
{
    // destructor
}

void AgentAdaptor::Cancel()
{
    // handle method call net.connman.Agent.Cancel
    parent()->Cancel();
}

void AgentAdaptor::Release()
{
    // handle method call net.connman.Agent.Release
    parent()->Release();
}

void AgentAdaptor::ReportError(const QDBusObjectPath &service, const QString &error)
{
    // handle method call net.connman.Agent.ReportError
    parent()->ReportError(service, error);
}

void AgentAdaptor::ReportPeerError(const QDBusObjectPath &peer, const QString &error)
{
    // handle method call net.connman.Agent.ReportPeerError
    parent()->ReportPeerError(peer, error);
}

void AgentAdaptor::RequestBrowser(const QDBusObjectPath &service, const QString &url)
{
    // handle method call net.connman.Agent.RequestBrowser
    parent()->RequestBrowser(service, url);
}

QVariantMap AgentAdaptor::RequestInput(const QDBusObjectPath &service, const QVariantMap &fields)
{
    // handle method call net.connman.Agent.RequestInput
    return parent()->RequestInput(service, fields);
}

QVariantMap AgentAdaptor::RequestPeerAuthorization(const QDBusObjectPath &peer, const QVariantMap &fields)
{
    // handle method call net.connman.Agent.RequestPeerAuthorization
    return parent()->RequestPeerAuthorization(peer, fields);
}

#include "agentadaptor.moc"
